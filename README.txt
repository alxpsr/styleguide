# Code-style

## 1. Именование классов

### 1. Название классов только строчными буквами и через дефис.
Не используйте заглавные буквы и [camelCase](ссылка). Слова отделяйте через дефис.
TODO: написать про название такого нейминга.

Плохо
```
.accordionMenu {}
```

Хорошо
```
.accordion-menu {}
```


### 1.2. Мы используем именование по принципу БЭМ.
[БЭМ](http://ru.bem.info) - это целая методология, со своими инструментами. Но
мы используем только схему именования по БЭМ. Разбиваем разметку на *блоки*
(компонентный подход), в них выделяем *элементы*. Чтобы изменить состояние
блока или элемента - добавляем *модификаторы*.

Плохо
```
.menu-item-active {}
```

Хорошо
```
.menu__item_active {}
```

### 1.3. Для элемета `__`, для модификатора `_`.
Для выделения *элемента* в имени класса используйте `__` (два подчечкивания).
Для *модификатора - `_` (одно подчеркивание)

Плохо
```
.menu--item-text
.menu__item--text
.menuItem-text
```

Хорошо
```
.menu__item_text
```

### 1.4. Не пишите префиксы вроде `b_`.
В большинстве случаев из названия и так понятен его тип. Однако будет полезно
[почитать о БЭМ-префиксах](ссылка)

Плохо
```
.b_banner {}
.l_cards {}
```

Хорошо
```
.banner {}
.card-list {}
```


### 1.5. Используйте `&__`, чтобы писать короче.
Не [повторяйтесь](ссылка_про_DRY), не пишите много раз название блока во всех
элементах или модификаторах. Используйте оператор `&` из [scss](ссылка).
 Однако пишите полностью название блока и модификатор, когда [описываете
отдельное большое состояние](#ссылка_на_такое_правило).

Плохо
```
.menu__item {}
.menu__item_active {}
.menu {
    &_level_1 {
        /* много-много стилей и элементов */
    }
}
```

Хорошо
```
.menu {
    &__item {
        &_active {}
    }
}
.menu_level_1 {
    /* много-много стилей и элементов */
}
```

### 1.6. Не пишите в названии класса элемент у элемента.
Очень часто в HTML надо вложить элемент внутрь другого элемента. *Не надо* в
этом случае писать полный путь до этого элемента, описывать всех его
родителей. Внутри CSS структура элементов должна быть плоской.

Плохо
```
.menu__item__link {}
.footer__container__row__column {}
```

Хорошо
```
.menu__link {}
.footer {
    &__container {}
    &__row {} 
    &__column {}
}
```

### 1.8. Нет каскаду! И излишней специфичности селектора.
Код с [CSS-каскадом](ссылка) очень сложно, просто *чудовищно сложно* поддерживать.
Приходится учитывать [специфичность селектора](ссылка), например, чтобы
переопределить такой css-селектор `.menu>li>ul>li>a.first` придется написать
такой же длинный селектор `.menu>li>ul>li>a.special`. 

Плохо
```
.form .fieldset .input
```

Хорошо
```
.form {
    &__input {}
}
```

Есть исключения из правила:
```
// внутри блока с модификатором
.card_inverted {
    .card {
        &__title { color: #fff }
    }
}

// когда нужно переопределить стили сторонней js-библиотеки
.carousel {
    .slick-arrow { fill: #000; }
}

// если содержимое блока берется из WYSYWIG-редактора (напр. ckeditor.js)
.article {
    h1 { margin: 20px 0 10px; }
}
```

### 1.7. Не пишите !important.
Код с ними [тоже](ссылка_на_правило_про_специфичность) трудно поддерживать.
Обычно его пишут, когда нужно переопределить правило, но запутались в своих
каскадах и не понимают как работает [специфичность в CSS](ссылка). Писать
!important - это все равно что пытаться перекричать тех, кто говорит. А они
начинают говорить еще громче, и все начинают орать и срывают горло.

Плохо
```
// переопределяем каскад из стилей для WYSYWIG-редактора
.article ul>li { list-style: dots; }
.card {
    li { list-style: none!important; }
    // Плохо. Если в другой теме стили надо отменить?
}
```

Хорошо
```
.card_article {
    ul>li { list-style: none; }
}
```

Исключения из правила;
```
// надо отключить стили, проставленные сторонней js-библиотекой
.carousel_empty {
    .slick { display: none; }
}

// сторонний виджет вставляет асинхронно добавляет стили, а в них
// написан !important
.ya-map { border: 0!important }
```

### 1.9. Называйте классы по их назначению, а не по внешнему виду (нет .red, .big и т.д. ) (c) McFarland
### 1.10. Не давайте названия, основанные на местоположении элемента (нет .left, .top и т.д.) (c) McFarland
### 1.11. Не используйте непонятные и сокращенные названия (нет .s1, .bl-cr и т.д.)  (c) McFarland


## 2. Файловая структура

### 2.1. Один файл - один блок
### 2.2. Вложенные файлы с _
### 2.3. Плоская структура
### 2.4. Все переменные в 1 файле
### 2.5. Миксины в 1 папке
### 2.6. Нет вендорных префиксов
### 2.7. Нет миксинов и классов для border и т.п.


## 3. Структура внутри файла

### 3.1. Состояния отдельно
### 3.2. Адаптив отдельно


## 4. Адаптив

### 4.1. mobile first
### 4.2. min-width, max-width только в начале


## 5. Правила создания компонентов

### 5.1. Полочки и книжки
### 5.2. Компонент без отступов
### 5.3. Для отступов - миксины и модификаторы
### 5.4. 



## 6. Правила создания тем

### 6.1. Для состояний кнопок используйте миксины используйте миксин
### 6.2. Для отступов кнопок используйте переменные
### 6.3. Не убирайте бордер у кнопок
